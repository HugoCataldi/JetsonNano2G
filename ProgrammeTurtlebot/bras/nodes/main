#!/usr/bin/env python3

import sys
import copy
import rospy

import moveit_commander
import moveit_msgs.msg

from math import pi   # Importer le nombre pi
import tkinter as tk  # Importer Tkinter l'interface graphique





# Fonction pour convertir les radian et les degree
def convRad(deg):
    rad = deg * ((pi)/180)
    return rad
def convDeg(rad):
    deg = rad * (180/(pi))
    return int(deg)



# Fonction pour actualiser les Spinbox de l'angle des articulation
def actJoint():
    global arm_joint,r,b,d,c
    r.set(convDeg(arm_joint[0]))
    b.set(convDeg(arm_joint[1]))
    d.set(convDeg(arm_joint[2]))
    c.set(convDeg(arm_joint[3]))

# Fonction appliquer des position basique sur le bras robotique
def bttnPose(num):
    global arm_joint
    #Position Initiale
    if(num == 0):
        arm_joint[1] = convRad(-90)
        arm_joint[2] = convRad(70)
        arm_joint[3] = convRad(35)
    #Position Haute
    elif(num == 1):
        arm_joint[1] = 0
        arm_joint[2] = 0
        arm_joint[3] = 0
    #Position Milieu Haut
    elif(num == 2):
        arm_joint[1] = convRad(-55)
        arm_joint[2] = convRad(17)
        arm_joint[3] = convRad(38)
    #Position Milieu Bas
    elif(num == 3):
        arm_joint[1] = convRad(45)
        arm_joint[2] = 0
        arm_joint[3] = convRad(-45)
    #Position Basse
    elif(num == 4):
        arm_joint[1] = convRad(75)
        arm_joint[2] = convRad(-25)
        arm_joint[3] = convRad(-55)
    actJoint()
    arm_group.go(arm_joint)
    arm_group.stop()
    rospy.sleep(1)

# Fonction pour faire tourner le bras robotique
def bttnRotation(num):
    global arm_joint
    #Devant gauche
    if(num == 0):
	arm_joint[0] = convRad(45)
    #Devant
    elif(num == 1):
	arm_joint[0] = 0
    #Devant droite
    elif(num == 2):
	arm_joint[0] = convRad(-45)
    #Gauche
    elif(num == 3):
        arm_joint[0] = convRad(90)
    #Droite
    elif(num == 4):
        arm_joint[0] = convRad(-90)
    #Arriere Gauche
    elif(num == 5):
        arm_joint[0] = convRad(135)
    #Arriere Droit
    elif(num == 6):
        arm_joint[0] = convRad(-135)
    actJoint()
    arm_group.go(arm_joint)
    arm_group.stop()
    rospy.sleep(1)

# Fonction pour ouvrir ou fermer le bras robotique
def bttnOpenGripper():
    global grip_group,grip_joint

    grip_joint[0] = -0.01
    grip_group.go(grip_joint)
    grip_group.stop()

def bttnCloseGripper():
    global grip_group,grip_joint
    grip_joint[0] = 0.01
    grip_group.go(grip_joint)
    grip_group.stop()

# Fonction pour appliquer ses propre parametre d'angle sur les articulation du bras
def bttnValider():
    global arm_group,arm_joint,r,b,d,c
    arm_joint[0] = convRad(r.get())
    arm_joint[1] = convRad(b.get())
    arm_joint[2] = convRad(d.get())
    arm_joint[3] = convRad(c.get())
    arm_group.go(arm_joint)
    arm_group.stop()
    rospy.sleep(1)

# Fonction pour remettre le bras robotique dans sa position initial
def Reset():
    global arm_joint,arm_group
    arm_joint[0] = 0
    arm_joint[1] = convRad(-90)
    arm_joint[2] = convRad(70)
    arm_joint[3] = convRad(35)
    arm_group.go(arm_joint)
    arm_group.stop()
    rospy.sleep(1)

# Fonction pour faire une mise en scene du bras robotique
def Scene():
    bttnOpenGripper()
    bttnPose(4)

    rospy.sleep(15)

    bttnCloseGripper()
    bttnPose(2)
    
    rospy.sleep(20)

    bttnRotation(4)

    rospy.sleep(3)

    bttnPose(4)

    rospy.sleep(3)

    bttnOpenGripper()

    rospy.sleep(3)

    bttnPose(2)

    rospy.sleep(3)

    Reset()

if __name__ == '__main__':
    ###################################################################################  INITIALISATION DU BRAS  ########################################################################################
    # Initialisation du noeud
    rospy.loginfo("Lancement...")
    rospy.init_node('GripperController')
    moveit_commander.roscpp_initialize(sys.argv)

    # Variable des info du robot
    robot = moveit_commander.RobotCommander()
    #print("\n\n=====================")
    print(robot.get_group_names())
    #print("\n\n=====================")
    #print(robot.get_current_state())
    #print("\n\n=====================")
    
    # Variable des info du bras
    arm_group = moveit_commander.MoveGroupCommander("arm")
    arm_joint = arm_group.get_current_joint_values()

    grip_group = moveit_commander.MoveGroupCommander("gripper")
    grip_joint = grip_group.get_current_joint_values()

    #Position initial
    Reset()
    bttnCloseGripper()

    ##########################################################################################  I  H  M  ##############################################################################################
    #===Parametre de l'IHM=============================================================================================================================================================================
    CTRL = tk.Tk()
    CTRL.title("Controller")
    CTRL.config(bg='darkgrey')

    #====Ligne de rotatio==============================================================================================================================================================================
    tk.Button(CTRL, padx = 16, pady = 16, bd = 2, fg = 'white', font = ('arial', 20, 'bold'), text = '*', bg = 'black', command = lambda:bttnRotation(0)).grid(row = 1, column = 1)
    tk.Button(CTRL, padx = 16, pady = 16, bd = 2, fg = 'white', font = ('arial', 20, 'bold'), text = 'A', bg = 'black', command = lambda:bttnRotation(1)).grid(row = 1, column = 2)
    tk.Button(CTRL, padx = 16, pady = 16, bd = 2, fg = 'white', font = ('arial', 20, 'bold'), text = '*', bg = 'black', command = lambda:bttnRotation(2)).grid(row = 1, column = 3)
    tk.Button(CTRL, padx = 16, pady = 16, bd = 2, fg = 'white', font = ('arial', 20, 'bold'), text = '<', bg = 'black', command = lambda:bttnRotation(3)).grid(row = 2, column = 1)
    tk.Button(CTRL, padx = 16, pady = 16, bd = 2, fg = 'white', font = ('arial', 20, 'bold'), text = '>', bg = 'black', command = lambda:bttnRotation(4)).grid(row = 2, column = 3)
    tk.Button(CTRL, padx = 16, pady = 16, bd = 2, fg = 'white', font = ('arial', 20, 'bold'), text = '*', bg = 'black', command = lambda:bttnRotation(5)).grid(row = 3, column = 1)
    tk.Button(CTRL, padx = 16, pady = 16, bd = 2, fg = 'white', font = ('arial', 20, 'bold'), text = '*', bg = 'black', command = lambda:bttnRotation(6)).grid(row = 3, column = 3)

    #====igne de position==============================================================================================================================================================================
    tk.Button(CTRL, padx = 16, pady = 16, bd = 2, fg = 'white', font = ('arial', 13, 'bold'), text = 'Position Haute', bg = 'black', command = lambda:bttnPose(2)).grid(row = 4, column = 1)
    tk.Button(CTRL, padx = 16, pady = 16, bd = 2, fg = 'white', font = ('arial', 13, 'bold'), text = 'Position Initial', bg = 'black', command = lambda:bttnPose(0)).grid(row = 3, column = 2)
    tk.Button(CTRL, padx = 16, pady = 16, bd = 2, fg = 'white', font = ('arial', 13, 'bold'), text = 'Position Avant', bg = 'black', command = lambda:bttnPose(1)).grid(row = 4, column = 2)
    tk.Button(CTRL, padx = 16, pady = 16, bd = 2, fg = 'white', font = ('arial', 13, 'bold'), text = 'Position Basse', bg = 'black', command = lambda:bttnPose(4)).grid(row = 5, column = 2)
    tk.Button(CTRL, padx = 16, pady = 16, bd = 2, fg = 'white', font = ('arial', 13, 'bold'), text = 'Position Milieu', bg = 'black', command = lambda:bttnPose(3)).grid(row = 4, column = 3)

    #====Ligne du gripper==============================================================================================================================================================================
    tk.Button(CTRL, padx = 16, pady = 16, bd = 2, fg = 'black', font = ('arial', 13, 'bold'), text = 'Ouvrir Gripper', bg = 'grey', command = bttnOpenGripper).grid(row = 6, column = 1)
    tk.Button(CTRL, padx = 16, pady = 16, bd = 2, fg = 'black', font = ('arial', 13, 'bold'), text = 'Fermer Gripper', bg = 'grey', command = bttnCloseGripper).grid(row = 6, column = 3)

    #====Ligne de l'angle des servo====================================================================================================================================================================
    r=tk.IntVar()
    b=tk.IntVar()
    d=tk.IntVar()
    c=tk.IntVar()
    tk.Label(CTRL,text="Servo de Rotation").grid(row = 7, column = 1)
    tk.Spinbox(CTRL, textvariable =r,from_=-180, to=180).grid(row = 7, column = 2)

    tk.Label(CTRL,text="Servo du bassin").grid(row = 8, column = 1)
    tk.Spinbox(CTRL, textvariable =b,from_=-180, to=180).grid(row = 8, column = 2)

    tk.Label(CTRL,text="Servo du dos").grid(row = 9, column = 1)
    tk.Spinbox(CTRL, textvariable =d,from_=-180, to=180).grid(row = 9, column = 2)

    tk.Label(CTRL,text="Servo du cou").grid(row = 10, column = 1)
    tk.Spinbox(CTRL, textvariable =c,from_=-180, to=180).grid(row = 10, column = 2)
    r.set(convDeg(arm_joint[0]))
    b.set(convDeg(arm_joint[1]))
    d.set(convDeg(arm_joint[2]))
    c.set(convDeg(arm_joint[3]))

    tk.Button(CTRL, padx = 16, pady = 16, bd = 2, fg = 'black', font = ('arial', 13, 'bold'), text = 'VALIDER', bg = 'green', command = bttnValider).grid(row = 11, column = 2)

    #===Cinquieme ligne================================================================================================================================================================================
    tk.Button(CTRL, padx = 16, pady = 16, bd = 2, fg = 'black', font = ('arial', 13, 'bold'), text = 'QUIITER', bg = 'darkred', command = CTRL.destroy).grid(row = 12, column = 1)
    tk.Button(CTRL, padx = 16, pady = 16, bd = 2, fg = 'white', font = ('arial', 13, 'bold'), text = 'SCENE', bg = 'purple', command = Scene).grid(row = 12, column = 2)
    tk.Button(CTRL, padx = 16, pady = 16, bd = 2, fg = 'black', font = ('arial', 13, 'bold'), text = 'RESET', bg = 'goldenrod', command = Reset).grid(row = 12, column = 3)

    #===Lancement de l'IHM=============================================================================================================================================================================
    CTRL.mainloop()

    ###################################################################################################################################################################################################
